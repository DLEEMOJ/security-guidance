<project name="mojsecguide" default="dist" basedir="..">
	<description>
		Build scripting for MoJ Security Guidance.

		To run a build:
		1. Run the startcmd.sh script in the DITA_DIR installation directory.
		2. Change to the directory containing this Ant build script.
		3. Run a build ant -lib $DITA_DIR/config -f builder.ant [task], for example:
			ant -lib $DITA_DIR/config -f builder.ant clean
	</description>

	<!-- set global properties for this build -->
	<property environment="env"/>
	<property name="dita" location="dita"/>
	<property name="build" location="${dita}/out"/>
	<property name="docs" location="docs"/>
	<property name="images" location="images"/>
	<property name="jekyll-baseline" location="jekyll-baseline"/>
	<!-- Ensure that environment variable DITA_DIR is set to
		the installation directory for the DITA Open Source Toolkit -->
	<property name="dita.dir" location="${env.DITA_DIR}"/>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp>
			<format property="TODAY_GB" pattern="d MMMM yyyy" locale="en,GB"/>
			<format property="EXPIRY_GB" pattern="d MMMM yyyy" locale="en,GB" offset="1" unit="month"/>
		</tstamp>
		<!-- Create the date of this build as a conref source. -->
		<copy file="${dita}/tstamp-src.dita" tofile="${dita}/tstamp.dita" overwrite="true"/>
		<replace file="${dita}/tstamp.dita" token="@TSTAMP@" value="${TODAY_GB}"/>
		<replace file="${dita}/tstamp.dita" token="@TSTAMP-EXPIRY@" value="${EXPIRY_GB}"/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<!-- Create the docs directory structure used for publication -->
		<mkdir dir="${docs}"/>
	</target>

	<target name="compile_md" depends="init"
				description="compile the source into markdown">
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${dita}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${dita}/html.ditaval:${dita}/audience-tech.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="markdown_github"/>
		</ant>
	</target>

	<target name="compile_pdf" depends="init"
				description="compile the source into PDF">
		<!-- First build the Technical users PDF, containing all content. -->
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${dita}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${dita}/pdf.ditaval:${dita}/audience-tech.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="pdf"/>
		</ant>
		<!-- Rename this file to be Tech users guide. -->
		<move file="${build}/moj-guidance.pdf" tofile="${build}/moj-guidance-tech.pdf" overwrite="true"/>
		<!-- Now build the 'all users' guide, omitting the technical details. -->
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${dita}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${dita}/pdf.ditaval:${dita}/audience-allusers.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="pdf"/>
		</ant>
	</target>

	<target name="compile_word" depends="init"
				description="compile the source into Word">
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${dita}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${dita}/html.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="docx"/>
		</ant>
	</target>

	<target name="compile_epub" depends="init"
				description="compile the source into EPUB3">
		<!-- Build the version for all users. -->
		<exec dir="${dita}" executable="ditac" output="build-allusers.txt">
			<arg line="-images img -p xsl-resources-directory res -filter epub-allusers.ditaval -format epub3 -index -v out/moj-guidance.epub moj-guidance.ditamap"/>
		</exec>
		<!-- Report results -->
		<loadfile property="epub-allusers" srcFile="build-allusers.txt" />
		<echo message="${epub-allusers}" />
		<delete file="build-allusers.txt"/>
		<!-- Build the version for tech users. -->
		<exec dir="${dita}" executable="ditac" output="build-tech.txt">
			<arg line="-images img -p xsl-resources-directory res -filter epub-tech.ditaval -format epub3 -index -v out/moj-guidance-tech.epub moj-guidance.ditamap"/>
		</exec>
		<!-- Report results -->
		<loadfile property="epub-tech" srcFile="build-tech.txt" />
		<echo message="${epub-tech}" />
		<delete file="build-tech.txt"/>
	</target>

	<target name="compile" depends="compile_md,compile_pdf,compile_epub"/>

	<target name="dist" depends="compile"
				description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${docs}"/>
		<mkdir dir="${docs}/images"/>
		<mkdir dir="${docs}/gs"/>
		<copy todir="${docs}" >
			<fileset dir="${jekyll-baseline}"/>
		</copy>
		<copy todir="${docs}/images" >
			<fileset dir="${images}"/>
		</copy>
		<copy todir="${docs}" >
			<fileset dir="${build}"/>
		</copy>
		<copy file="${docs}/cyber-and-technical-security-guidance.md" tofile="${docs}/index.md" overwrite="true"/>
		<copy todir="${docs}/gs" >
			<fileset dir="${basedir}/gs"/>
		</copy>
	</target>

	<target name="clean"
				description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${docs}"/>
	</target>

	<target name="preview" depends="compile_md" description="Minimal build for local preview purposes.">
		<delete dir="${docs}"/>
		<mkdir dir="${docs}"/>
		<mkdir dir="${docs}/images"/>
		<copy todir="${docs}" >
			<fileset dir="${jekyll-baseline}"/>
		</copy>
		<copy todir="${docs}/images" >
			<fileset dir="${images}"/>
		</copy>
		<copy todir="${docs}" >
			<fileset dir="${build}"/>
		</copy>
		<copy file="${docs}/cyber-and-technical-security-guidance.md" tofile="${docs}/index.md" overwrite="true"/>
	</target>
</project>
